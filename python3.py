# -*- coding: utf-8 -*-
"""python3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11CzrzPkRYBbS_QFmA2q67GUgcCUE8ep0
"""

for i in range(97,123):
  print(chr(i),end = " ")

for x in range(65,91):
  print(chr(x),end = " ")

no = int(input('enter a no: '))
for i in range(1,11):
 print(i*no)

i = str(input('enter a input: '))
alphabet=0
digit=0
for item in i:
  if item.isalpha():
    alphabet += 1
  elif item.isdigit():
    digit += 1
print(alphabet,digit)

def is_perfect(n):
    divisors_sum = sum(i for i in range(1, n) if n % i == 0)
    return divisors_sum == n

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_armstrong(n):
    digits = str(n)
    num_digits = len(digits)
    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)
    return sum_of_powers == n

def check_number(n):
    if is_perfect(n):
        print(f"{n} is a Perfect Number")
    else:
        print(f"{n} is not a Perfect Number")

    if is_palindrome(n):
        print(f"{n} is a Palindrome Number")
    else:
        print(f"{n} is not a Palindrome Number")

    if is_prime(n):
        print(f"{n} is a Prime Number")
    else:
        print(f"{n} is not a Prime Number")

    if is_armstrong(n):
        print(f"{n} is an Armstrong Number")
    else:
        print(f"{n} is not an Armstrong Number")

number = int(input("Enter a number: "))
check_number(number)

